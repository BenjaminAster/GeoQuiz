
@use "sass:math";

@function calculateColorComponent($dark-color, $light-color, $component) {
	$dark-val: 0;
	$light-val: 0;

	$var-light: var(--is-light);

	@if ($component == red) {
		$dark-val: red($dark-color);
		$light-val: red($light-color);
	} @else if ($component == green) {
		$dark-val: green($dark-color);
		$light-val: green($light-color);
	} @else if ($component == blue) {
		$dark-val: blue($dark-color);
		$light-val: blue($light-color);
	} @else if ($component == alpha) {
		$dark-val: alpha($dark-color);
		$light-val: alpha($light-color);
	}

	@if ($dark-val == $light-val) {
		@return $dark-val;
	}

	$sign: if($light-val >= $dark-val, "+", "-");
	$difference: abs($light-val - $dark-val);

	@if ($dark-val == 0) {
		@return "calc(#{$var-light}*#{$difference})";
	}

	@return "calc(#{$dark-val} #{$sign} #{$var-light}*#{$difference})";
}

@function darkLight($dark-color, $light-color) {
	$red: calculateColorComponent($dark-color, $light-color, red);
	$green: calculateColorComponent($dark-color, $light-color, green);
	$blue: calculateColorComponent($dark-color, $light-color, blue);
	$alpha: calculateColorComponent($dark-color, $light-color, alpha);

	@if ((alpha($dark-color) == 1) and (alpha($light-color) == 1)) {
		@return "rgb(#{$red},#{$green},#{$blue})";
	}

	@return "rgba(#{$red},#{$green},#{$blue},#{$alpha})";
}
